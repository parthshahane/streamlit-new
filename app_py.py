# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zuPVm3P9gcmlvx6vEI0-1dc65PoW2lL_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve
!pip install streamlit
import streamlit as st

# Load dataset
train_df = pd.read_csv('/content/Titanic_train.csv')
test_df = pd.read_csv('/content/Titanic_test.csv')

# Exploratory Data Analysis (EDA)
print(train_df.info())
print(train_df.describe())
print(train_df.isnull().sum())  # Checking missing values

# Visualizations
sns.countplot(x='Survived', data=train_df)
plt.show()

numerical_features = train_df.select_dtypes(include=np.number).columns # Use 'columns' instead of 'column'
sns.heatmap(train_df[numerical_features].corr(), annot=True, cmap='coolwarm')

plt.show()

# Data Preprocessing
train_df.fillna(train_df.median(numeric_only=True), inplace=True)  # Handle missing values
test_df.fillna(test_df.median(numeric_only=True), inplace=True)

# Encoding categorical variables
label_encoder = LabelEncoder()
for col in ['Sex', 'Embarked']:
    if col in train_df.columns:
        train_df[col] = label_encoder.fit_transform(train_df[col])
        test_df[col] = label_encoder.transform(test_df[col])

# Feature Selection
features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']
X = train_df[features]
y = train_df['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model Training
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = LogisticRegression()
model.fit(X_train, y_train)

# ROC Curve
fpr, tpr, _ = roc_curve(y_test, model.predict_proba(X_test)[:, 1])
plt.plot(fpr, tpr, label="Logistic Regression")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.show()

# Feature Importance
print(pd.DataFrame({'Feature': features, 'Coefficient': model.coef_[0]}))



pip install streamlit pandas numpy scikit-learn matplotlib seaborn

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import os

model_filename = "logistic_regression_model.pkl"
scaler_filename = "scaler.pkl"
if not os.path.exists(model_filename):
  with open(model_filename, "wb") as file:
    pickle.dump(model, file)
else:
  print(f"Model file '{model_filename}' already exists. Loading...")

if not os.path.exists(scaler_filename):  # Check if scaler file exists
    with open(scaler_filename, "wb") as file:
        pickle.dump(scaler, file)
        print(f"Scaler saved to {scaler_filename}")
else:
    print(f"Scaler file '{scaler_filename}' already exists. Loading...")


# Function to make predictions
def predict_survival(Pclass, Sex, Age, SibSp, Parch, Fare, Embarked):
    input_data = np.array([[Pclass, Sex, Age, SibSp, Parch, Fare, Embarked]])
    input_data = scaler.transform(input_data)  # Scale the input
    prediction = model.predict(input_data)
    return "Survived" if prediction[0] == 1 else "Did not survive"

# Streamlit UI
st.title("ðŸš¢ Titanic Survival Prediction App")
st.write("Enter details to predict if a passenger would have survived the Titanic disaster.")

Pclass = st.selectbox("Passenger Class", [1, 2, 3])
Sex = st.selectbox("Sex", ["Male", "Female"])
Age = st.number_input("Age", min_value=0, max_value=100, step=1)
SibSp = st.number_input("Siblings/Spouses Aboard", min_value=0, max_value=10, step=1)
Parch = st.number_input("Parents/Children Aboard", min_value=0, max_value=10, step=1)
Fare = st.number_input("Fare", min_value=0.0, max_value=600.0, step=0.1)
Embarked = st.selectbox("Embarked Port", ["C", "Q", "S"])

# Convert categorical values
Sex = 1 if Sex == "Male" else 0
Embarked = ["C", "Q", "S"].index(Embarked)

if st.button("Predict Survival"):
    result = predict_survival(Pclass, Sex, Age, SibSp, Parch, Fare, Embarked)
    st.success(f"Prediction: {result}")

